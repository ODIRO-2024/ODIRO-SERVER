##version: '3.8'
#
#services:
#  mysql-container2:
#    image: juyeonoh00/mysql:latest
#    environment:
#      MYSQL_ROOT_PASSWORD: 1234
#      MYSQL_DATABASE: mysql-container2
#      MYSQL_USER: other_user
#      MYSQL_PASSWORD: 1234
#      ports: 3306:3306
##      volumes: mysql-volume:/var/lib/mysql
#    networks:
#      - bridge
#  odiro-container2:
#    image: juyeonoh00/odiro:latest
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-container2:3306/mysql-container2
#      SPRING_DATASOURCE_USERNAME: root
#      SPRING_DATASOURCE_PASSWORD: 1234
#    ports:
#      - "8080:8080"
#    depends_on:
#      - mysql-container2
#    networks:
#      - bridge
#volumes:
#  mysql-data:
#networks:
#  bridge:
#
#
###version: '3.8'
##
##services:
##  mysql-container2:
##    image: mysql:latest
##    environment:
##      MYSQL_ROOT_PASSWORD: 1234
##      MYSQL_DATABASE: mysql-container2
##      MYSQL_USER: other_user
##      MYSQL_PASSWORD: 1234
##      ports: 3306:3306
###      volumes: mysql-volume:/var/lib/mysql
##    networks:
##      - bridge
##  odiro-container2:
##    image: odiro
##    environment:
##      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-container2:3306/mysql-container2
##      SPRING_DATASOURCE_USERNAME: root
##      SPRING_DATASOURCE_PASSWORD: 1234
##    ports:
##      - "8080:8080"
##    depends_on:
##      - mysql-container2
##    networks:
##      - bridge
##volumes:
##  mysql-data:
##networks:
##  bridge:
#

services:
#  mysql:
#    image: mysql:8.0.39
#    container_name: mysql
#    environment:
#      MYSQL_ROOT_PASSWORD: 1234
#      MYSQL_DATABASE: mysql
#      MYSQL_LOG_CONSOLE: "true"
#    ports:
#      - "3306:3306"
#    volumes:
#      - mysql:/var/lib/mysql
#    networks:
#      - my-network
#    healthcheck:
#      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
#      interval: 20s
#      timeout: 10s
#      retries: 10

  redis:
    image: redis:6.2
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - my-network

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: backend
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=${MODE:-prod}
    networks:
      - my-network

networks:
  my-network:
    driver: bridge




